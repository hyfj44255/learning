
func (r *MyResourceReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {

  // Get Kubernetes client
  client := r.Client
  nodes := &corev1.NodeList{}
  
  // List nodes
  if err := client.List(ctx, nodes); err != nil {
    return ctrl.Result{}, err
  }

  // Print CPU and memory 
  for _, node := range nodes.Items {
    cpu := node.Status.Capacity["cpu"]
    memory := node.Status.Capacity["memory"]
    log.Info("Node", "name", node.Name, "cpu", cpu, "memory", memory) 
  }
  
  // Requeue
  return ctrl.Result{Requeue: true}, nil
}


go
import (
  "context"
  "time"

  corev1 "k8s.io/api/core/v1"
  discovery "k8s.io/api/discovery/v1beta1"
  "sigs.k8s.io/controller-runtime/pkg/client"

  "github.com/go-logr/logr"
  ctrl "sigs.k8s.io/controller-runtime"
)

func (r *MyResourceReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {

  logger := r.Log.WithValues("myresource", req.NamespacedName)

  // Get client
  client := r.Client

  // List nodes
  nodeList := &discovery.NodeList{}
  if err := client.List(ctx, nodeList); err != nil {
    logger.Error(err, "unable to list nodes")
    return ctrl.Result{}, err
  }

  // Print CPU and memory for each node
  for _, node := range nodeList.Items {
    cpu := node.Status.Capacity.Cpu()
    memory := node.Status.Capacity.Memory()

    logger.Info("Node details", 
              "Name", node.Name,
              "CPU", cpu.String(),
              "Memory", memory.String())
  }

  // Requeue
  return ctrl.Result{RequeueAfter: 30 * time.Second}, nil
}
